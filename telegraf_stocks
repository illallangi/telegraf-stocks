#!/usr/bin/env python
import re
import argparse
import yfinance
from json import dumps

# Source: https://djangosnippets.org/snippets/585/
camelcase_to_underscore = (
    lambda str: re.sub("(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))", "_\\1", str)
    .lower()
    .strip("_")
)


def process(ticker=None, measurement=None, json=False):
    payload = yfinance.Ticker(ticker)
    tags, values = convert(payload=payload.info)
    line = {"tags": tags, "values": values, "measurement": measurement}
    return dumps(line) if json else dump_influxdb_line(**line)


def convert(payload=None):
    tags = {}
    values = {}

    for k in payload:
        v = payload[k]
        converted_key = camelcase_to_underscore(k)
        converted_value = None

        try:
            converted_value = float(v)
        except ValueError:  # All string values become tags
            tags[converted_key] = v
        except TypeError:  # All null values are ignored
            pass
        if converted_value:
            values[converted_key] = converted_value
    return (tags, values)


def dump_influxdb_line(tags=None, values=None, measurement=None):
    tags_line = ",".join("%s=%s" % (k, influxdb_escaped(tags[k])) for k in tags)
    values_line = ",".join("%s=%f" % (k, values[k]) for k in values)
    final_line = measurement + "," + tags_line + " " + values_line
    return final_line


def influxdb_escaped(value):
    return (
        value.replace(" ", "\\ ")
        .replace('"', '"')
        .replace(",", "\\,")
        .replace("=", "\\=")
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Retrieves stock information from Yahoo Finance and formats them in InfluxDB line format."
    )
    parser.add_argument(
        "--ticker", required=True, help="Ticker symbol to check on Yahoo Finance."
    )
    parser.add_argument(
        "--measurement", default="stocks", help="Measurement name for InfluxDB."
    )
    parser.add_argument(
        "--json", action="store_true", help="Output in JSON instead of InfluxDB"
    )
    args = parser.parse_args()
    try:
        print(process(ticker=args.ticker, measurement=args.measurement, json=args.json))
    except Exception as e:
        print(e)
